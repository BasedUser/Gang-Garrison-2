<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="22">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    var temp;
    if (cloak &amp;&amp; !inRange &amp;&amp; global.buffer_team != player.team)
    {
    write_ubyte(global.serializeBuffer, 0);
    write_ushort(global.serializeBuffer, 0);
    }
    else
    {
    write_ubyte(global.serializeBuffer, keyState);
    write_ushort(global.serializeBuffer, netAimDirection);
    }
    if (player.class == CLASS_SPY)
    if (spyjump || spystab || inRange)
    {
        if (spyjump) write_ubyte(global.serializeBuffer, 1);
        else if (spystab || inRange) write_ubyte(global.serializeBuffer, 2);
        spyjump = false;
        spystab = false;
        write_ushort(global.serializeBuffer, x*5);
        write_ushort(global.serializeBuffer, y*5);
    }
    else write_ubyte(global.serializeBuffer, 0);
    if(global.updateType == QUICK_UPDATE or global.updateType == FULL_UPDATE) {
        if (cloak &amp;&amp; !inRange &amp;&amp; !beingHealed&amp;&amp; global.buffer_team != player.team)
        {
        write_ushort(global.serializeBuffer, 0);
        write_ushort(global.serializeBuffer, 0);
        }
        else
        {
        write_ushort(global.serializeBuffer, x*5);
        write_ushort(global.serializeBuffer, y*5);
        }
        write_byte(global.serializeBuffer, hspeed*5);
        write_byte(global.serializeBuffer, vspeed*5);
        write_ubyte(global.serializeBuffer, ceil(hp));
        write_ubyte(global.serializeBuffer, currentWeapon.ammoCount);
        
        temp = 0;
        if(cloak) temp |= $01;
        if(intel) temp |= $02;
        //allocate the next three bits of the byte for movestatus sync
        temp |= (moveStatus &amp; $07) &lt;&lt; 2;
        write_ubyte(global.serializeBuffer, temp);               
    }
    if(global.updateType == FULL_UPDATE) {
        write_ubyte(global.serializeBuffer, animationOffset);
        //class specific syncs
        switch(player.class)
        {
        case CLASS_SPY:
            write_ubyte(global.serializeBuffer, cloakAlpha*255);
            break;
        case CLASS_MEDIC:
            write_ubyte(global.serializeBuffer, currentWeapon.uberCharge*255/2000);
            break;
        case CLASS_ENGINEER:
            write_ubyte(global.serializeBuffer, nutsNBolts);
            break;
        case CLASS_SNIPER:
            write_ubyte(global.serializeBuffer, currentWeapon.t);
            break;
        default:
            write_ubyte(global.serializeBuffer, 0);
        }
        write_short(global.serializeBuffer, alarm[1]);
        with(currentWeapon) {
            event_user(12);
        }   
    }
    beingHealed = false;
}


</argument>
      </arguments>
    </action>
  </actions>
</event>
