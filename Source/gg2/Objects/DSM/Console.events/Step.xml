<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if clearScreenTimer &gt; 0{// Don't just delete everything, make it zoom upwards.
    console_print('');
    console_print('');
    console_print('');
    console_print('');
    console_print('');
    clearScreenTimer -= 5;
}

// Checks for any input
if keyboard_string != ""{
    current_text = string_copy(current_text, 0, cursor_position) + keyboard_string + string_copy(current_text, cursor_position+1, string_length(current_text));
    cursor_position += string_length(keyboard_string);
    keyboard_string = "";
}

if keyboard_check_pressed(vk_up){
    commandLogIndex = max(0, commandLogIndex-1);
    current_text = ds_list_find_value(global.commandLog, commandLogIndex);
    cursor_position = string_length(current_text);
}else if keyboard_check_pressed(vk_down){
    commandLogIndex = min(ds_list_size(global.commandLog)-1, commandLogIndex+1);
    current_text = ds_list_find_value(global.commandLog, commandLogIndex);
    cursor_position = string_length(current_text);
}else if keyboard_check(vk_left){
    if cursor_moving == 0 or cursor_moving &gt;= 1{
        cursor_position = max(0, cursor_position - 1);
    }
    if cursor_moving &lt; 1{
        cursor_moving += (1/15)/global.delta_factor
    }
}else if keyboard_check(vk_right){
    if cursor_moving == 0 or cursor_moving &gt;= 1{
        cursor_position = min(string_length(current_text), cursor_position + 1);
    }
    if cursor_moving &lt; 1{
        cursor_moving += (1/15)/global.delta_factor
    }
}else if keyboard_check(vk_backspace) and cursor_position &gt; 0{
    if cursor_moving == 0 or cursor_moving &gt;= 1{
        current_text = string_copy(current_text, 0, cursor_position-1) + string_copy(current_text, cursor_position+1, string_length(current_text));
        cursor_position -= 1;
    }
    if cursor_moving &lt; 1{
        cursor_moving += (1/15)/global.delta_factor
    }
}else if keyboard_check(vk_delete) and cursor_position &lt; string_length(current_text){
    if cursor_moving == 0 or cursor_moving &gt;= 1{
        current_text = string_copy(current_text, 0, cursor_position) + string_copy(current_text, cursor_position+2, string_length(current_text));
    }
    if cursor_moving &lt; 1{
        cursor_moving += (1/15)/global.delta_factor
    }
}else{
/*if keyboard_check_pressed(vk_tab){
var commandString;
show_message('a')
//list is actually a map but w/e, fix later
    for (i=0; i&lt;ds_list_size(global.DSM_commandMap); i+=1){
        commandString=ds_list_find_value(global.DSM_commandMap,i)
        show_message(commandString)
        if string_pos(current_text,commandString)==0{
            show_message(string(current_text)+string(commandString))
        }
    }
}else{*/
    cursor_moving = 0;
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
