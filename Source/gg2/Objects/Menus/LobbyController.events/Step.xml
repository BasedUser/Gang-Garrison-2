<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    var size, namelength, server;
    
    if(lobbysocket != -1) {
        if(socket_has_error(lobbysocket)) {
            if(numServers == -1) {
                show_message("Connecting to the lobby server has failed. Reason:#" + socket_error(lobbysocket));
            }
            socket_destroy(lobbysocket);
            lobbysocket = -1;
        } else if(numServers == -1) {
            if(tcp_receive(lobbysocket, 1)) {
                numServers = read_ubyte(lobbysocket);
            }
        } else if(serversRead &lt; numServers) {
            if(serverNameLength == -1) {
                if(tcp_receive(lobbysocket, 1)) {
                    serverNameLength = read_ubyte(lobbysocket);
                }
            } else {
                if(tcp_receive(lobbysocket, serverNameLength+6)) {
                    server = instance_create(0,0,Server);
                    server.name = read_string(lobbysocket, serverNameLength);
                    if(string_pos("!private!", server.name) == 1) {
                        server.name = string_copy(server.name, 10, string_length(server.name)-9);
                        server.private = true;
                    } else {
                        server.private = false;
                    }
                    if string_count("#",server.name) &gt; 0 {
                        server.name = "Tornado";
                    }
                    server.ip = string(read_ubyte(lobbysocket))+"."+string(read_ubyte(lobbysocket))+"."+string(read_ubyte(lobbysocket))+"."+string(read_ubyte(lobbysocket));
                    server.port = read_ushort(lobbysocket);
                    ds_list_add(servers, server);
                    serversRead += 1;
                    serverNameLength = -1;
                }
            }
        } else {
            socket_destroy(lobbysocket);
            lobbysocket = -1;
        }                    
    }
    
    if(mouse_x &gt; xbegin and mouse_x &lt; xbegin+width) {
        virtualitem = round((mouse_y-ybegin)/spacing-0.5);
        if(virtualitem&lt;0 or virtualitem&gt;items) {
            virtualitem = -1;
        } else {
            virtualitem += offset;
        }
        if(mouse_check_button_pressed(mb_left) and virtualitem&lt;ds_list_size(servers) and virtualitem&gt;=0){
            global.isHost = false;
            server = ds_list_find_value(servers, virtualitem);
            global.joinedServerName = server.name;
            global.serverIP = server.ip;
            global.serverPort = server.port;
            if instance_exists(Client) with(Client)instance_destroy();
            global.client = instance_create(0,0,Client);
            
            if(not instance_exists(global.client)) {
                room_goto_fix(Lobby);
            }
        }
    } else {
        virtualitem = -1;
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
